{
  "name": "range-parser",
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@vision-media.ca",
    "url": "http://tjholowaychuk.com"
  },
  "description": "Range header field string parser",
  "version": "1.0.1",
  "repository": {
    "type": "git",
    "url": "git://github.com/jshttp/range-parser"
  },
  "devDependencies": {
    "istanbul": "0",
    "mocha": "1",
    "should": "2"
  },
  "license": "MIT",
  "scripts": {
    "test": "mocha --reporter spec --require should",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --require should",
    "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter dot --require should"
  },
  "keywords": [
    "range",
    "parser",
    "http"
  ],
  "files": [
    "index.js"
  ],
  "readme": "\n# range-parser\n\n[![NPM version][npm-image]][npm-url]\n[![Build status][travis-image]][travis-url]\n[![Test coverage][coveralls-image]][coveralls-url]\n[![Dependency Status][david-image]][david-url]\n[![License][license-image]][license-url]\n[![Downloads][downloads-image]][downloads-url]\n\n  Range header field parser.\n\n## Example:\n\n```js\nassert(-1 == parse(200, 'bytes=500-20'));\nassert(-2 == parse(200, 'bytes=malformed'));\nparse(200, 'bytes=0-499').should.eql(arr('bytes', [{ start: 0, end: 199 }]));\nparse(1000, 'bytes=0-499').should.eql(arr('bytes', [{ start: 0, end: 499 }]));\nparse(1000, 'bytes=40-80').should.eql(arr('bytes', [{ start: 40, end: 80 }]));\nparse(1000, 'bytes=-500').should.eql(arr('bytes', [{ start: 500, end: 999 }]));\nparse(1000, 'bytes=-400').should.eql(arr('bytes', [{ start: 600, end: 999 }]));\nparse(1000, 'bytes=500-').should.eql(arr('bytes', [{ start: 500, end: 999 }]));\nparse(1000, 'bytes=400-').should.eql(arr('bytes', [{ start: 400, end: 999 }]));\nparse(1000, 'bytes=0-0').should.eql(arr('bytes', [{ start: 0, end: 0 }]));\nparse(1000, 'bytes=-1').should.eql(arr('bytes', [{ start: 999, end: 999 }]));\nparse(1000, 'items=0-5').should.eql(arr('items', [{ start: 0, end: 5 }]));\nparse(1000, 'bytes=40-80,-1').should.eql(arr('bytes', [{ start: 40, end: 80 }, { start: 999, end: 999 }]));\n```\n\n## Installation\n\n```\n$ npm install range-parser\n```\n\n[npm-image]: https://img.shields.io/npm/v/range-parser.svg?style=flat-square\n[npm-url]: https://npmjs.org/package/range-parser\n[github-tag]: http://img.shields.io/github/tag/jshttp/range-parser.svg?style=flat-square\n[github-url]: https://github.com/jshttp/range-parser/tags\n[travis-image]: https://img.shields.io/travis/jshttp/range-parser.svg?style=flat-square\n[travis-url]: https://travis-ci.org/jshttp/range-parser\n[coveralls-image]: https://img.shields.io/coveralls/jshttp/range-parser.svg?style=flat-square\n[coveralls-url]: https://coveralls.io/r/jshttp/range-parser?branch=master\n[david-image]: http://img.shields.io/david/jshttp/range-parser.svg?style=flat-square\n[david-url]: https://david-dm.org/jshttp/range-parser\n[license-image]: http://img.shields.io/npm/l/range-parser.svg?style=flat-square\n[license-url]: LICENSE\n[downloads-image]: http://img.shields.io/npm/dm/range-parser.svg?style=flat-square\n[downloads-url]: https://npmjs.org/package/range-parser\n[gittip-image]: https://img.shields.io/gittip/jonathanong.svg?style=flat-square\n[gittip-url]: https://www.gittip.com/jonathanong/\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/jshttp/range-parser/issues"
  },
  "homepage": "https://github.com/jshttp/range-parser",
  "_id": "range-parser@1.0.1",
  "_shasum": "f9da15b7451fe1b261959b63342dd92921d34da2",
  "_from": "range-parser@~1.0.0",
  "_resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.0.1.tgz"
}
